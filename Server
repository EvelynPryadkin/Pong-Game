import java.io.*;
import java.net.*;
import java.awt.*;

public class Server {
    private static final int PORT = 12345; // Port number
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    private static final int PADDLE_HEIGHT = 100;
    private static final int PADDLE_WIDTH = 15;
    private static final int BALL_SIZE = 20;

    private static int paddle1Y = HEIGHT / 2 - PADDLE_HEIGHT / 2;
    private static int paddle2Y = HEIGHT / 2 - PADDLE_HEIGHT / 2;
    private static int ballX = WIDTH / 2 - BALL_SIZE / 2;
    private static int ballY = HEIGHT / 2 - BALL_SIZE / 2;
    private static int ballVelX = 5;
    private static int ballVelY = 5;
    private static int score1 = 0;
    private static int score2 = 0;

    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);
            System.out.println("Server started... Waiting for players.");

            // Accept two clients
            Socket player1 = serverSocket.accept();
            System.out.println("Player 1 connected.");
            Socket player2 = serverSocket.accept();
            System.out.println("Player 2 connected.");

            // Create input and output streams for both players
            BufferedReader in1 = new BufferedReader(new InputStreamReader(player1.getInputStream()));
            BufferedWriter out1 = new BufferedWriter(new OutputStreamWriter(player1.getOutputStream()));
            BufferedReader in2 = new BufferedReader(new InputStreamReader(player2.getInputStream()));
            BufferedWriter out2 = new BufferedWriter(new OutputStreamWriter(player2.getOutputStream()));

            // Game loop
            while (true) {
                // Read paddle movement commands
                String move1 = in1.readLine();
                String move2 = in2.readLine();

                if (move1.equals("UP") && paddle1Y > 0) paddle1Y -= 10;
                if (move1.equals("DOWN") && paddle1Y < HEIGHT - PADDLE_HEIGHT) paddle1Y += 10;

                if (move2.equals("UP") && paddle2Y > 0) paddle2Y -= 10;
                if (move2.equals("DOWN") && paddle2Y < HEIGHT - PADDLE_HEIGHT) paddle2Y += 10;

                // Move ball
                ballX += ballVelX;
                ballY += ballVelY;

                // Ball collision with walls
                if (ballY <= 0 || ballY >= HEIGHT - BALL_SIZE) {
                    ballVelY = -ballVelY;
                }

                // Ball collision with paddles
                if (ballX <= PADDLE_WIDTH && ballY >= paddle1Y && ballY <= paddle1Y + PADDLE_HEIGHT) {
                    ballVelX = -ballVelX;
                }
                if (ballX >= WIDTH - BALL_SIZE - PADDLE_WIDTH && ballY >= paddle2Y && ballY <= paddle2Y + PADDLE_HEIGHT) {
                    ballVelX = -ballVelX;
                }

                // Ball out of bounds
                if (ballX <= 0) {
                    score2++;
                    ballX = WIDTH / 2 - BALL_SIZE / 2;
                    ballY = HEIGHT / 2 - BALL_SIZE / 2;
                }
                if (ballX >= WIDTH - BALL_SIZE) {
                    score1++;
                    ballX = WIDTH / 2 - BALL_SIZE / 2;
                    ballY = HEIGHT / 2 - BALL_SIZE / 2;
                }

                // Send updated game state to clients
                out1.write(paddle1Y + " " + score1 + " " + ballX + " " + ballY + "\n");
                out1.flush();
                out2.write(paddle2Y + " " + score2 + " " + ballX + " " + ballY + "\n");
                out2.flush();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
